image: condaforge/linux-anvil:latest

stages:
  - lint
  - build
  - test
  - deploy

# === Variables ===

variables:
  PACKAGE_VERSION: 0.0.25

.py36: &py36
  PYTHON_VERSION: "3.6"

.db_tools: &db_tools
  SUBPKG_NAME: db_tools

.df_tools: &df_tools
  SUBPKG_NAME: df_tools

.ml_tools: &ml_tools
  SUBPKG_NAME: ml_tools

.py_tools: &py_tools
  SUBPKG_NAME: py_tools

.sequence_tools: &sequence_tools
  SUBPKG_NAME: sequence_tools

.structure_tools: &structure_tools
  SUBPKG_NAME: structure_tools

.system_tools: &system_tools
  SUBPKG_NAME: system_tools

# === Configurations ===

.conda_configure: &conda_configure
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .conda_packages/*.tar.bz2
      - .conda_packages/urls.txt
  before_script:
    # Conda environment variables
    - export CONDA_PKGS_DIRS="${CI_PROJECT_DIR}/.conda_packages"
    # Make conda cache and bld folders
    - mkdir -p "${CI_PROJECT_DIR}/conda-bld" "${CONDA_PKGS_DIRS}"
    - rm -rf ${CONDA_PKGS_DIRS}/${CI_PROJECT_NAME}-*
    # Conda configure
    - conda config --set channel_priority true
    - conda config --append pkgs_dirs "${CONDA_PKGS_DIRS}"
    - conda config --append channels pytorch
    - conda config --append channels ostrokach-forge
    - conda config --append channels bioconda
    - case "${PACKAGE_VERSION}" in
      *dev*)
        conda config --append channels kimlab;
        conda config --append channels kimlab/label/dev;
        conda config --append channels ostrokach;
        conda config --append channels ostrokach/label/dev;
      ;;
      *)
        conda config --append channels kimlab;
        conda config --append channels ostrokach;
      ;;
      esac

# === Lint ===

lint:
  stage: lint
  <<: *conda_configure
  variables:
    <<: [*py36]
  script:
    - conda install -yq "python=${PYTHON_VERSION}" isort flake8 mypy
    - python -m isort -p "${CI_PROJECT_NAME}" -c
    - python -m flake8
    - python -m mypy -p "${CI_PROJECT_NAME}" || true

# === Build ===

.build: &build
  stage: build
  <<: *conda_configure
  script:
    - export SUBPKG_NAME="all"  # to silence warnings
    # Build conda packages
    - cd "${CI_PROJECT_DIR}/.conda"
    - conda build .
      --no-test
      --python $PYTHON_VERSION
      --output-folder "${CI_PROJECT_DIR}/conda-bld"
  artifacts:
    paths:
    - conda-bld

build-py36:
  <<: *build
  variables:
    <<: [*py36]

# === Test ===

.test: &test
  stage: test
  script:
    # Restore built packages
    - cp -r $CI_PROJECT_DIR/conda-bld/* /opt/conda/conda-bld/
    - conda index /opt/conda/conda-bld/
    # Run tests
    - cd $CI_PROJECT_DIR/.conda
    - conda build .
      --test
      --python $PYTHON_VERSION
    # Code coverage
    - mkdir "${CI_PROJECT_DIR}/coverage"
    - mv "$CI_PROJECT_DIR/.coverage" "$CI_PROJECT_DIR/coverage/${SUBPKG_NAME}"
  artifacts:
    paths:
      - environment-py${PYTHON_VERSION/./}.yml
      - "${CI_PROJECT_DIR}/coverage/${SUBPKG_NAME}"

test-db_tools-py36:
  <<: [*conda_configure, *test]
  dependencies:
    - build-py36
  variables:
    <<: [*db_tools, *py36]

test-df_tools-py36:
  <<: [*conda_configure, *test]
  dependencies:
    - build-py36
  variables:
    <<: [*df_tools, *py36]

test-ml_tools-py36:
  <<: [*conda_configure, *test]
  dependencies:
    - build-py36
  variables:
    <<: [*ml_tools, *py36]

test-py_tools-py36:
  <<: [*conda_configure, *test]
  dependencies:
    - build-py36
  variables:
    <<: [*py_tools, *py36]

test-sequence_tools-py36:
  <<: [*conda_configure, *test]
  dependencies:
    - build-py36
  variables:
    <<: [*sequence_tools, *py36]

test-structure_tools-py36:
  <<: [*conda_configure, *test]
  dependencies:
    - build-py36
  variables:
    <<: [*structure_tools, *py36]

test-system_tools-py36:
  <<: [*conda_configure, *test]
  dependencies:
    - build-py36
  variables:
    <<: [*system_tools, *py36]

# === Pages ===

.docs: &docs
  stage: test
  script:
    # Conda install
    - cp -r $CI_PROJECT_DIR/conda-bld/* /opt/conda/conda-bld/
    - conda index /opt/conda/conda-bld/
    - conda install -yq --use-local "python=$PYTHON_VERSION" $CI_PROJECT_NAME
    # Build docs
    - conda install -yq nbconvert ipython ipykernel pandoc
    - pip install -q sphinx sphinx_rtd_theme recommonmark nbsphinx
    - (cd docs && sphinx-apidoc ../$CI_PROJECT_NAME -o api/generated -TeMP)
    - sphinx-build docs public
    # Coverage
    - coverage combine coverage
    - coverage report
    - coverage html
    - mv htmlcov public/
  coverage: /^TOTAL.* (\d+\%)/

test-pages:
  <<: [*conda_configure, *docs]
  dependencies:
    - build-py36
  variables:
    <<: [*py36]
  except:
    - master
    - tags

pages:
  <<: [*conda_configure, *docs]
  dependencies:
    - build-py36
  variables:
    <<: [*py36]
  only:
    - master
    - tags
  except:
    - triggers
  artifacts:
    paths:
    - public

# === Deploy ===

.deploy: &deploy
  stage: deploy
  before_script:
    - conda install twine -yq --no-channel-priority
  script:
    # Rename wheels from `-linux_x86_64.whl` to `-manylinux1_x86_64.whl`
    # so that they can be uploaded to PyPI.
    - for i in $CI_PROJECT_DIR/conda-bld/linux-64/*.whl ; do
      echo $i ;
      if [[ $i = *"-linux_x86_64.whl" ]]; then
        mv "${i}" "${i%%-linux_x86_64.whl}-manylinux1_x86_64.whl" ;
      fi ;
      done
    # Development releases go to the Anaconda dev channel
    - if [[ ${PACKAGE_VERSION} = *"dev"* ]] ; then
        anaconda -t $ANACONDA_TOKEN upload $CI_PROJECT_DIR/conda-bld/linux-64/*.tar.bz2 -u ${CI_PROJECT_NAMESPACE} --label dev --force --no-progress ;
       fi
    # Tagged releases go to the Anaconda and PyPI main channels
    - if [[ -n ${CI_COMMIT_TAG} ]] ; then
        anaconda -t $ANACONDA_TOKEN upload $CI_PROJECT_DIR/conda-bld/linux-64/*.tar.bz2 -u ${CI_PROJECT_NAMESPACE} --no-progress ;
        twine upload $CI_PROJECT_DIR/conda-bld/linux-64/*.whl ;
      fi

deploy-py36:
  <<: *deploy
  dependencies:
    - build-py36
